//SESION 1:
//HTML:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Consumo de API REST</title>
</head>
<body>
    <h1>Posts</h1>
    <div id="posts"></div>

    <h2>Login</h2>
    <form id="login-form">
        <label for="email">Email:</label>
        <input type="email" id="email" required>
        <br>
        <label for="password">Password:</label>
        <input type="password" id="password" required>
        <br>
        <button type="submit">Login</button>
    </form>

    <div id="login-error"></div>
    <script src="Script.js"></script>
</body>
</html>

//JS:
// 1. Función para obtener posts
async function fetchPosts() {
    const container = document.getElementById('posts');
    try {
        const response = await fetch('https://jsonplaceholder.typicode.com/posts');
        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
        const posts = await response.json();
        displayPosts(posts.slice(0, 5)); // Mostrar solo 5 posts
    } catch (error) {
        container.innerHTML = `<p style="color: red;">Error al obtener posts: ${error.message}</p>`;
    }
}

// 2. Función para mostrar posts en el DOM
function displayPosts(posts) {
    const container = document.getElementById('posts');
    container.innerHTML = posts
        .map(post => `<div><h3>${post.title}</h3><p>${post.body}</p></div>`)
        .join('');
}

// 3. Ejecutar al cargar la página
fetchPosts();

// 4. Función de login
async function loginUser(email, password) {
    try {
        const response = await fetch('https://reqres.in/api/login', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ email, password }),
        });
        if (!response.ok) throw new Error(`Error: ${response.status}`);
        const data = await response.json();
        return data.token; // Retorna el token JWT
    } catch (error) {
        return null; // En caso de error, se retorna null
    }
}

// 5. Función para manejar el login del formulario
document.getElementById('login-form').addEventListener('submit', async (event) => {
    event.preventDefault(); // Prevenir el envío por defecto

    const email = document.getElementById('email').value;
    const password = document.getElementById('password').value;
    const errorMessage = document.getElementById('login-error');

    // Validar que los campos no estén vacíos
    if (!email || !password) {
        errorMessage.innerHTML = `<p style="color: red;">Por favor, ingrese ambos campos: email y password.</p>`;
        return;
    }

    const token = await loginUser(email, password);
    if (token) {
        console.log('Token JWT:', token);
        errorMessage.innerHTML = `<p style="color: green;">Login exitoso! Token JWT: ${token}</p>`;
    } else {
        errorMessage.innerHTML = `<p style="color: red;">Login fallido. Verifique sus credenciales.</p>`;
    }
});

// 6. Función para obtener datos protegidos con JWT
async function fetchProtectedData(token) {
    try {
        const response = await fetch('https://jsonplaceholder.typicode.com/users/1', {
            headers: { 'Authorization': `Bearer ${token}` }, // Simulación
        });
        if (!response.ok) throw new Error(`Error: ${response.status}`);
        const user = await response.json();
        console.log('Usuario protegido:', user);
    } catch (error) {
        console.error('Error al obtener datos protegidos:', error);
    }
}

// Modificar la función main para incluir esto:
async function main() {
    const token = await loginUser('eve.holt@reqres.in', 'cityslicka');
    if (token) {
        await fetchProtectedData(token); // Usar el token
    }
}

// Ejecutar main solo si el usuario ya tiene login
main();



//SESION 2:
//HTML:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    
    <h1>Autenticación con JWT</h1>
	<button onclick="fetchDataWithJWT()">Obtener Datos Protegidos (GET)</button>
	<form id="postForm">
    	<input type="text" id="data" placeholder="Ingresa datos" required>
    	<button type="submit">Enviar Datos (POST)</button>
	</form>
	<div id="response"></div>
    <input type="text" id="tokenInput" placeholder="Ingresa nuevo token">
    <button id="saveToken">Guardar Token</button>

	<script src="Script.js"></script>

</body>
</html>


JS:
// Guardar el token JWT en localStorage
const JWT_TOKEN = localStorage.getItem('jwt_token') || 'TU_TOKEN_GENERADO_EN_JWT_IO';

// Función para validar y manejar expiración real del token
function validateToken(token) {
    try {
        const payload = JSON.parse(atob(token.split('.')[1]));
        if (payload.exp < Date.now() / 1000) {
            alert("El token ha expirado. Inicia sesión nuevamente.");
            localStorage.removeItem('jwt_token');
            return false;
        }
        return true;
    } catch (error) {
        console.error("Token inválido:", error);
        return false;
    }
}

// Función GET protegida con JWT
async function fetchDataWithJWT() {
    if (!validateToken(JWT_TOKEN)) {
        return;
    }

    try {
        const response = await fetch('https://jsonplaceholder.typicode.com/posts/1', {
            headers: { 'Authorization': `Bearer ${JWT_TOKEN}` }
        });
        const data = await response.json();
        document.getElementById('response').innerHTML = `<pre>${JSON.stringify(data, null, 2)}</pre>`;
    } catch (error) {
        console.error("Error GET:", error);
    }
}

// Función POST protegida con JWT
document.getElementById('postForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    if (!validateToken(JWT_TOKEN)) {
        return;
    }

    const postData = {
        title: document.getElementById('data').value,
        body: 'Contenido de prueba',
        userId: 1
    };

    try {
        const response = await fetch('https://jsonplaceholder.typicode.com/posts', {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${JWT_TOKEN}`,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(postData)
        });
        const data = await response.json();
        document.getElementById('response').innerHTML = `<pre>${JSON.stringify(data, null, 2)}</pre>`;
    } catch (error) {
        console.error("Error POST:", error);
    }
});

// Guardar el token en localStorage cuando se obtiene de un backend
document.getElementById('saveToken').addEventListener('click', () => {
    const newToken = document.getElementById('tokenInput').value;
    if (newToken) {
        localStorage.setItem('jwt_token', newToken);
        alert("Token guardado correctamente.");
    }
});
